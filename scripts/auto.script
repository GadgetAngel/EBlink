/////////////////////////////////////////////////////
//
//     This is a virtual device and will try to detect
//     which cortex-m vendor is connected
//
//

/////////////////////////////////////////////////////
//
//  The entry point for this script
//
function main()
{
    local probe = ::InterfAPI()
    local result


    // Check if the right script API is supported
    if( VERSION < 3.8)
    {
       errorf("Error:\nIncompatiable EBlink version %.1f\nPlease update EBlink\n", VERSION)
       return -1
    }

    //============================================================
    // ==== Siliabs  (Gecko's) cortex-M
    result = probe.readMem32(0x0FE081FC)
    if(  (result >= 0 ) && (probe.value32) )
    {
        // Load the Silabs script and start from there
        require("silabs-auto.script")
        return main();
    }
    
    //============================================================
    // ==== ATmel  cortex-M  
    
//ToDo

    //============================================================
    // ==== NXP  cortex-M 

// ToDo    
    
    //============================================================
    // ==== STmicro  cortex-M    
    {       
        result = probe.readMem32(0xE0042000)
        if( (result >=0) && (probe.value32 == 0) )
            result = probe.readMem32(0x40015800)
        if( (result >=0) && (probe.value32 == 0) )
            result = probe.readMem32(0x5C001000)
        if( (result >=0) && (probe.value32 == 0) )
            result = probe.readMem32(0xE0044000)   
        if(  (result >= 0 ) && (probe.value32) )
        {
            // Load the STmicro script and start from there
            require("stm32-auto.script")
            return main();             
        }            
    }          

    errorf("Error:\tCan't detect MCU vendor!\n\tIf reset is disabled (\"dr\" option), try with reset.")
    return -1  // We have already thrown an error so use -1 (otherwise < -1)    
}
