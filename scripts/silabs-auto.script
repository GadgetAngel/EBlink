//! Silabs
/////////////////////////////////////////////////////
//
//     This is a virtual device for Silabs cortex's
//     The real device type is checked by reading
//     the device ID
//

/////////////////////////////////////////////////////
//
//   Generic Silabs memory map template
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
//   We use @@ to denote that it is a multi-line format string and not verbatim.
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
    <property name=\"blocksize\">0x%x</property>
 </memory>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
 <memory type=\"flash\" start=\"0x0fe00000\" length=\"0x14000\">
   <property name=\"blocksize\">0x800</property>
 </memory>
 </memory-map>"


 ///////////////////////////////////////////////////////
 //
 //   Global variables also for all included scripts
 //
intrfApi  <- InterfAPI() // Global so that all included scripts files also have access
targetApi <- TargetAPI() // Global interface to the target class, our reset_post need it and this is faster than local defined
flashSize <- 0           // Global flash size, is also used for mass erase


mscBase    <- 0x400E0000 // Default base address for flash MSC
mscLockOff <- 0x40       // Default offset of the unlock register
/////////////////////////////////////////////////////
//
//  The entry point for this script
//
function main()
{
    // Get the family ID and part number
    local result = intrfApi.readMem32(0x0FE081FC)
    if(  (result < 0 ) || (intrfApi.value32 == 0) )
    {
        errorf("Error: can't access target device!\n")
        // We have already thrown an error so use -1 (ERROR_NOTIFIED) and otherwise < -1
        return ERROR_NOTIFIED
    }

    return set_target(intrfApi.value32)
}

/////////////////////////////////////////////////////
//
//
//
function set_target(deviceId)
{
    // Check if the right script API is supported
    if( VERSION < 3.8)
    {
       errorf("Error:\nIncompatiable EBlink version %.1f\nPlease update EBlink\n", VERSION)
       return ERROR_NOTIFIED
    }

    local devApi = ::DeviceAPI() // We only use the device class wrapper in this function
    local result

    // Isolate the family ID and part number from the 32 bits register value
    local famId     = (deviceId >> 16) & 0xFF
    local partValue = deviceId & 0xFFFF

    noticef("Silabs fam. ID : %d\n", famId)
    noticef("Silabs part ID : %d\n", partValue)

    // Now that we have the family ID, print the info on screen
    printf("Silabs device  : ")
    switch(famId)
    {
    case 16 : // EFR32MG1P EFR32 Mighty Gecko Gen1 Device Family
        printf("EFR32MG1P%d - Mighty Gecko\n", partValue)
        break
    case 17 : //  EFR32MG1B EFR32 Mighty Gecko Gen1 Device Family
        printf("EFR32MG1B%d - Mighty Gecko Gen1\n", partValue)
        break
    case 18 : //  EFR32MG1V EFR32 Mighty Gecko Gen1 Device Family
        printf("EFR32MG1V%d - Mighty Gecko Gen1\n", partValue)
        break
    case 19 : //  EFR32BG1P EFR32 Blue Gecko Gen1 Device Family
        printf("EFR32BG1P%d - Blue Gecko Gen1\n", partValue)
        break
    case 20 : //  EFR32BG1B EFR32 Blue Gecko Gen1 Device Family
        printf("EFR32BG1B%d - Blue Gecko Gen1\n", partValue)
        break
    case 21 : //  EFR32BG1V EFR32 Blue Gecko Gen1 Device Family
        printf("EFR32BG1V%d - Blue Gecko Gen1\n", partValue)
        break
    case 25 : //  EFR32FG1P EFR32 Flex Gecko Gen1 Device Family
        printf("EFR32FG1P%d - Flex Gecko Gen1\n", partValue)
        break
    case 26 : //  EFR32FG1B EFR32 Flex Gecko Gen1 Device Family
        printf("EFR32FG1B%d - Flex Gecko Gen1\n", partValue)
        break
    case 27 : //  EFR32FG1V EFR32 Flex Gecko Gen1 Device Family
        printf("EFR32FG1V%d - Flex Gecko Gen1\n", partValue)
        break
    case 40 : //  EFR32MG13P EFR32 Mighty Gecko Family Series 1 Device Config 3
        printf("EFR32MG13P%d - EFR32 Mighty Gecko Family Series 1 Config 3\n", partValue)
        break
    case 41 : //  EFR32MG13B EFR32 Mighty Gecko Family Series 1 Device Config 3
        printf("EFR32MG13B%d - EFR32 Mighty Gecko Family Series 1 Config 3\n", partValue)
        break
    case 42 : //  EFR32MG13V EFR32 Mighty Gecko Family Series 1 Device Config 3
        printf("EFR32MG13V%d - EFR32 Mighty Gecko Family Series 1 Config 3\n", partValue)
        break
    case 43 : // EFR32BG13P EFR32 Blue Gecko Family Series 1 Device Config 3
        printf("EFR32BG13P%d - EFR32 Blue Gecko Family Series 1 Config 3\n", partValue)
        break
    case 44 : //  EFR32BG13B EFR32 Blue Gecko Family Series 1 Device Config 3
        printf("EFR32BG13B%d - EFR32 Blue Gecko Family Series 1 Config 3\n", partValue)
        break
    case 45 : // EFR32BG13V EFR32 Blue Gecko Family Series 1 Device Config 3
        printf("EFR32BG13V%d - EFR32 Blue Gecko Family Series 1 Config 3\n", partValue)
        break
    case 49 : // EFR32FG13P EFR32 Flex Gecko Family Series 1 Device Config 3
        printf("EFR32FG13P%d - EFR32 Flex Gecko Family Series 1 Config 3\n", partValue)
        break
    case 50 : // EFR32FG13B EFR32 Flex Gecko Family Series 1 Device Config 3
        printf("EFR32FG13B%d - EFR32 Flex Gecko Family Series 1 Config 3\n", partValue)
        break
    case 51 : // EFR32FG13V EFR32 Flex Gecko Family Series 1 Device Config 3
        printf("EFR32FG13V%d - EFR32 Flex Gecko Family Series 1 Config 3\n", partValue)
        break
    case 52 : //  EFR32MG14P EFR32 Mighty Gecko Family Series 1 Device Config 4
        printf("EFR32MG14P%d - EFR32 Mighty Gecko Family Series 1 Config 4\n", partValue)
        break
    case 53 : //  EFR32MG14B EFR32 Mighty Gecko Family Series 1 Device Config 4
        printf("EFR32MG14B%d - EFR32 Mighty Gecko Family Series 1 Config 4\n", partValue)
        break
    case 54 : //  EFR32MG14V EFR32 Mighty Gecko Family Series 1 Device Config 4
        printf("EFR32MG14V%d - EFR32 Mighty Gecko Family Series 1 Config 4\n", partValue)
        break
    case 55 : //  EFR32BG14P EFR32 Blue Gecko Family Series 1 Device Config 4
        printf("EFR32BG14P%d - EFR32 Blue Gecko Family Series 1 Config 4\n", partValue)
        break
    case 56 : //  EFR32BG14B EFR32 Blue Gecko Family Series 1 Device Config 4
        printf("EFR32BG14B%d - EFR32 Blue Gecko Family Series 1 Config 4\n", partValue)
        break
    case 57 : //  EFR32BG14V EFR32 Blue Gecko Family Series 1 Device Config 4
        printf("EFR32BG14V%d - EFR32 Blue Gecko Family Series 1 Config 4\n", partValue)
        break
    case 61 : //  EFR32FG14P EFR32 Flex Gecko Family Series 1 Device Config 4
        printf("EFR32FG14P%d - EFR32 Flex Gecko Family Series 1 Config 4\n", partValue)
        break
    case 62 : //  EFR32FG14B EFR32 Flex Gecko Family Series 1 Device Config 4
        printf("EFR32FG14B%d - EFR32 Flex Gecko Family Series 1 Config 4\n", partValue)
        break
    case 63 : //  EFR32FG14V EFR32 Flex Gecko Family Series 1 Device Config 4
        printf("EFR32FG14V%d - EFR32 Flex Gecko Family Series 1 Config 4\n", partValue)
        break
    case 71 : //  EFM32G EFM32 Gecko Device Family
        printf("EFM32G%d - Gecko\n", partValue)
        break
    case 72 : //  EFM32GG EFM32 Giant Gecko Device Family
        printf("EFM32GG%d - Giant Gecko\n", partValue)
        break
    case 73 : //  EFM32TG EFM32 Tiny Gecko Device Family
        printf("EFM32TG%d - Tiny Gecko\n", partValue)
        break
    case 74 : //  EFM32LG EFM32 Leopard Gecko Device Family
        printf("EFM32LG%d - Leopard Gecko\n", partValue)
        break
    case 75 : //  EFM32WG EFM32 Wonder Gecko Device Family
        printf("EFM32WG%d - Wonder Gecko\n", partValue)
        break
    case 76 : //  EFM32ZG EFM32 Zero Gecko Device Family
        printf("EFM32ZG%d - Zero Gecko\n", partValue)
        break
    case 77 : //  EFM32HG EFM32 Happy Gecko Device Family
        printf("EFM32HG%d - Happy Gecko\n", partValue)
        break
    case 81 : //  EFM32PG1B EFM32 Pearl Gecko Gen1 Device Family
        printf("EFM32PG1B%d - Pearl Gecko Gen1\n", partValue)
        break
    case 83 : //  EFM32JG1B EFM32 Jade Gecko Gen1 Device Family
        printf("EFM32JG1B%d - Jade Gecko Gen1\n", partValue)
        break
    case 120 : //  EZR32LG EZR32 Leopard Gecko Device Family
        printf("EZR32LG%d - Leopard Gecko\n", partValue)
        break
    case 121 : //  EZR32WG EZR32 Wonder Gecko Device Family
        printf("EZR32WG%d - Wonder Gecko\n", partValue)
        break
    case 122 : //  EZR32HG EZR32 Happy Gecko Device Family
        printf("EZR32HG%d - Happy Gecko\n", partValue)
        break

    default:
        printf("Unknown family ID %d. (Please add it)\n", famId)
    }

    // Get the MEM_INFO_PAGE_SIZE
    result = intrfApi.readMem32(0x0FE081E4)
    intrfApi.value32 = (intrfApi.value32 >> 24) & 0xFF
    local pageSize = pow(2, ((intrfApi.value32+10) & 0xFF))

    // Get the MEM_INFO_FLASH and MEM_INFO_RAM
    result = intrfApi.readMem32(0x0FE081F8 )

    flashSize = intrfApi.value32 & 0xFFFF
    local ramSize = (intrfApi.value32 >> 16) & 0xFFFF

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flashSize = FLASH_SIZE & 0xffff
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ramSize = RAM_SIZE & 0xffff
    }

    printf("Detected FLASH %d Kbyte - Page %d bytes\n", flashSize, pageSize)
    printf("Detected RAM   %d Kbyte\n", ramSize)

    // Build the XML memory map and set it active.
    devApi.memmap( format( mem_template,  flashSize*1024, pageSize, ramSize*1024 ))

    // Find the rigth base address of the MSC by reading the status register and check WDATAREADY.
    noticef("Silabs-auto.script: Check MSC base address 0x%X\n", mscBase )
    result = intrfApi.readMem32(mscBase|0x1C)
    if( (result < ERROR_OK ) || !(intrfApi.value32 &0x08))
    {
        mscBase    = 0x400C0000
        mscLockOff = 0x3C

        // Check WDATAREADY again on this MSC base address
        result = intrfApi.readMem32(mscBase|0x1C)
        noticef("Silabs-auto.script: Check MSC base address 0x%X\n", mscBase )
        if( (result < ERROR_OK ) || !(intrfApi.value32 &0x08))
        {
            errorf("ERROR: Can't find MSC base address\n");
            return ERROR_NOTIFIED
        }
    }

    // Generic flash algorithm
    require("silabs/flashalgo.script")
    return ERROR_OK
}


/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    // We don't use this if the reset is an user_script type. In that
    // case, the user is responsible to initialize the chip and we don't
    // gonna intervene with it.
    if( resetType != USER_RESET)
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x00000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x00000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }
    return ERROR_OK
}

