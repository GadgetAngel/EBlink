/////////////////////////////////////////////////////
//
//                   STM32H7x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
//   We use @@ to denote that it is a multi-line format string and not verbatim.
//
const mem_template_H7 = @@"
<?xml version=\"1.0\"?> <memory-map>
    <!-- ITCM ram 64kB -->
    <memory type=\"ram\" start=\"0x00000000\" length=\"0x10000\"/>

    <!-- DTCM Ram, 128kB -->
    <memory type=\"ram\" start=\"0x20000000\" length=\"0x20000\"/>

    <!-- AXI Ram (D1),  512kB -->
    <memory type=\"ram\" start=\"0x24000000\" length=\"0x80000\"/>

    <!-- AHB SRAM1, 128 kB -->
    <memory type=\"ram\" start=\"0x30000000\" length=\"0x20000\"/>

    <!-- AHB SRAM2, 128 kB -->
    <memory type=\"ram\" start=\"0x30020000\" length=\"0x20000\"/>

    <!-- AHB SRAM3,  32 kB -->
    <memory type=\"ram\" start=\"0x30040000\" length=\"0x08000\"/>

    <!-- AHB SRAM4,  64 kB -->
    <memory type=\"ram\" start=\"0x38000000\" length=\"0x10000\"/>

    <!-- Backup SRAM -->
    <memory type=\"ram\" start=\"0x38800000\" length=\"0x01000\"/>

    <!-- Sectors 0..7 128KB each -->
    <memory type=\"flash\" start=\"0x08000000\" length=\"0x%X\">
        <property name=\"blocksize\">0x20000</property>
        <property name=\"secstart\">0</property>
    </memory>

    <!-- Place holder for second 1MB bank -->
    %s

    <!-- peripheral regs -->
    <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>

    <!-- AHB3 Peripherals -->
    <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>

    <!-- cortex regs -->
    <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>

    <!-- bootrom -->
    <memory type=\"rom\" start=\"0x00100000\" length=\"0xEDC0\"/>

    <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x20\"/>

    <!-- option byte area (virtual sector) -->
    <memory type=\"flash\" start=\"0x1ff20000\" length=\"32\">
        <property name=\"blocksize\">32</property>
        <property name=\"secstart\">999</property>
    </memory>

</memory-map>"


// The second 1MB bank if available which is put into the place holder above
const mem_template_2MB = @@"
    <!-- Sectors 8..16 128kB each -->
    <memory type=\"flash\" start=\"0x08100000\" length=\"0x100000\">
        <property name=\"blocksize\">0x20000</property>
    </memory>"

hasSecondBank <- false  // Global boolean used by flash script

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The itrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI()

    local result
    local flash_size
    local page_size
    local ram_size
    local string_2MB
    local flash_1bank

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = itrfApi.writeMem32(0x5c001004, 7)

    // Stop watchdog counters during halt: DBGMCU_APB3FZ2 |= WWDG1
    itrfApi.readMem32(0xE00E1038)
    result = itrfApi.writeMem32(0xE00E1038, itrfApi.value32 | 0x40)

    // Stop watchdog counters during halt: DBGMCU_APB1LFZ2 |= WWDG2
    itrfApi.readMem32(0xE00E1040)
    result = itrfApi.writeMem32(0xE00E1040, itrfApi.value32 | 0x800)

    // Stop watchdog counters during halt: DBGMCU_APB4FZ2 |= WDGLSD1 | WDGLSD2
    itrfApi.readMem32(0xE00E1058)
    result = itrfApi.writeMem32(0xE00E1058, itrfApi.value32 | 0xC0000)

    // If IWDG runs as HARDWARE watchdog (44.3.4) erase
    // will be aborted by the Watchdog and erase fails!
    // Setting IWDG_KR to 0xaaaa does not seem to help!*/
    result = itrfApi.readMem32(0x52002020)
    if( !(itrfApi.value32 & (1<<4) ) )
        printf("Hardware IWDG running. Expect failure. Set IWDG1_SW!\n")

    // Get the flash size by reading the info register
    result = itrfApi.readMem32(0x1ff1e880)
    flash_size = (itrfApi.value32 & 0xffff) * 1024

    printf("STmicro family : STM32H")
    switch(deviceId) {
        case 0x450 : 
            printf("74x/75x\n") 
            ram_size = 0x80000
            break
        
        case 0x480 :
            printf("7Ax/7Bx\n") 
            ram_size = 0x80000
            break

        case 0x483 :        
            printf("72x/73x\n") 
            ram_size = 0x80000
            break        

    }

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

    if(flash_size>0x100000)
    {
      flash_1bank = 0x100000
      string_2MB = mem_template_2MB
      hasSecondBank = true
    }
    else
    {
      flash_1bank = flash_size
      string_2MB = ""
    }

    // Generate XML and put it in EBlink's device object
    devApi.memmap( format(mem_template_H7, flash_1bank, string_2MB))

    require("stmicro/flash/h7.script")

    // No errors
    return ERROR_OK
}




