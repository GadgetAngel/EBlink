/////////////////////////////////////////////////////
//
//                   STM32G4x
//

// For now, only single bank is supported!!!
// ToDo: - dual bank
//       - option programming

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template_single = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>  
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>
";

const mem_template_dual = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory> 
 <memory type=\"flash\" start=\"0x08400000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">256</property>
 </memory> 
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>
";

// The parameters for the flash script
const FLASH_BASE 0x40022000
hasDualBank <- false // Can be set by upper scripts is we have dual bank support
/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The itrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI();

    local result;
    local flash_size;
    local page_size;
    local cram_size;
    local sram_size;

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = itrfApi.writeMem32(0x40015804, 6);

    // Get the flash size by reading the info register
    result = itrfApi.readMem32(0x1fff75e0)
    flash_size = itrfApi.value32 & ~3;
    flash_size = (flash_size & 0xffff) * 1024;

    switch(deviceId)
    {       
    case 0x460 : // STM32G07xxx/08xxx
            page_size = 0x800;
            ram_size = 0x9000; // 36Kbyte
            break;

    case 0x466 : // STM32G03xxx/04xxx
            page_size = 0x800;
            ram_size = 0x2000; // 8Kbyte
            break;  
    case 0x468 : // STM32G431xx/441xx  (cat 2)
            page_size = 0x800;
            cram_size = 0x2800; // 10K
            sram_size = 0x8000; // 32K
            break;      
        
    case 0x469 : // STM32G47xxx/48xxx   (cat 3)         
            page_size =  0x800;  
            cram_size = 0x8000;  // 32K
            sram_size = 0x20000; // 128K
            hasDualBank = readDualBankOption()
            if(hasDualBank)
                flash_size = flash_size/2
            break;      
    }
    
    // Inform the user
    printf("Detected FLASH : 0x%X%s\nConfigured RAM : 0x%X\n", flash_size, (hasDualBank ? " - Dualbank" :""), sram_size);    
    
    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024;
      printf("CLI set  FLASH : 0x%X\n", flash_size);      
    }
    
    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024;
      printf("CLI set    RAM : 0x%X\n", ram_size);        
    }

    if(hasDualBank)
    {
        devApi.memmap( format( mem_template_dual,   flash_size,
                                                    cram_size,
                                                    sram_size,
                                                    flash_size,
                                                    page_size,
                                                    flash_size,
                                                    page_size) );
    }
    else    
    {
        devApi.memmap( format( mem_template_single, flash_size,
                                                    cram_size,
                                                    sram_size,
                                                    flash_size,
                                                    page_size) );
    }

    // Flash loader script
    require("stmicro/flash/wx_l4_gx.script");

    return 0;
}


////////////////////////////////////////
//
//  Helper function to get the dual bank
//  option state
//
function readDualBankOption()
{
     itrfApi.readMem32(FLASH_BASE+0x20)
     return (itrfApi.value32 & (1<<22) ? true: false)
}
