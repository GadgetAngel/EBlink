/////////////////////////////////////////////////////
//
//                   STM32F7x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template_F7 = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <!-- ITCM ram 16kB -->
 <memory type=\"ram\" start=\"0x00000000\" length=\"0x4000\"/>
 <!-- ITCM flash -->
 <memory type=\"rom\" start=\"0x00200000\" length=\"0x100000\"/>
 <!-- sram -->
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%X\"/>

 <!-- Sectors 0..3 32KB each -->
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x20000\">
  <property name=\"blocksize\">0x8000</property>
  <property name=\"secstart\">0</property>
 </memory>

 <!-- Sector 4 128 kB -->
 <memory type=\"flash\" start=\"0x08020000\" length=\"0x20000\">
  <property name=\"blocksize\">0x20000</property>
 </memory>

 <!-- Sectors 5..7 128kB each -->
 <memory type=\"flash\" start=\"0x08040000\" length=\"0xC0000\">
  <property name=\"blocksize\">0x40000</property>
 </memory>

 <!-- Place holder for second 1MB -->
 %s

 <!-- peripheral regs -->
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <!-- AHB3 Peripherals -->
 <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
 <!-- cortex regs -->
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
 <!-- bootrom -->
 <memory type=\"rom\" start=\"0x00100000\" length=\"0xEDC0\"/>
 <!-- option byte area -->
 <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x20\"/>
</memory-map>";


const mem_template_2MB = @@"
<!-- Sectors 8..11 128kB each -->
<memory type=\"flash\" start=\"0x08100000\" length=\"0x100000\">
<property name=\"blocksize\">0x40000</property>
</memory>";

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The itrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI();

    local result;
    local flash_size;
    local page_size;
    local ram_size;
    local string_2MB;

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = itrfApi.writeMem32(0xE0042004, 7);

    // Stop watchdog counters during halt: DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
    result = itrfApi.writeMem32(0xE0042008, 0x00001800);

    // Get the flash size by reading the info register
    if(deviceId == 0x452)
        result = itrfApi.readMem32(0x1FF07A22);
    else
        result = itrfApi.readMem32(0x1ff0f442);

    flash_size = itrfApi.value32 >>16;
    flash_size = (flash_size & 0xffff) * 1024;

    switch(deviceId) {

    case 0x449 : // CHIPID_STM32_F7
            ram_size = 0x50000;
            break;

    case 0x451 : // CHIPID_STM32_F7xx
            ram_size = 0x80000;
            break;

    case 0x452 : // CHIPID_STM32_F72x
            ram_size = 0x80000;
            break;

    }
    
    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size); 
    
    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024;
      printf("CLI set  FLASH : 0x%X\n", flash_size);      
    }
    
    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024;
      printf("CLI set    RAM : 0x%X\n", ram_size);        
    }

    if(flash_size>0x100000)
      string_2MB = mem_template_2MB;
     else
      string_2MB = "";

    devApi.memmap( format(mem_template_F7, ram_size, string_2MB));


    require("stmicro/flash/f7_f4_f2.script");

    return 0;
}




