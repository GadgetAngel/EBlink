/////////////////////////////////////////////////////
//
//                   STM32L0x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x1FF80000\" length=\"20\">
   <property name=\"blocksize\">20</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>
";

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The itrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI();

    local result;
    local flash_size;
    local page_size = 0x80;
    local ram_size = 0x2000;

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = itrfApi.writeMem32(0x40015804, 6);

    // Get the flash size by reading the info register
    result = itrfApi.readMem32(0x1ff8007c)
    flash_size = itrfApi.value32 & ~3;
    flash_size = (flash_size & 0xffff) * 1024;

    switch(deviceId)
    {
        case 0x417 : // CHIPID_STM32_L0
            page_size = 0x80;
            ram_size = 0x2000;
            break;

        case 0x425 : // CHIPID_STM32_L0_CAT2
            page_size = 0x80;
            ram_size = 0x2000;
            break;

        case 0x447 : // CHIPID_STM32_L0_CAT5
            page_size = 0x80;
            ram_size = 0x5000;
            break;

        case 0x457 : // CHIPID_STM32_L0_CAT1
            page_size = 0x80;
            ram_size = 0x2000;
            break;
    }

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size);

    devApi.memmap( format( mem_template,  flash_size,
                                          ram_size,
                                          flash_size,
                                          page_size) );

    // Flash loader script
    require("stmicro/flash/stm32L0_fl.script");

    return 0;
}




