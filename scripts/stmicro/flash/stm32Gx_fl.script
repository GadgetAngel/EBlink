/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32G0_fl flash loader
//

//  ToDo:  - fast programming with bootloader
//         - option programming
//         - dual bank for G4x

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_start()
{
    local targetApi = ::TargetAPI();
    local result;
	local time;

    // Be sure that the core is halted
    result = targetApi.halt(); if(result<0) return result;
	
	targetApi.reset(0);

    // Wait for halt
    time = GetTickCount();
	do{
	    targetApi.poll();
	    // Timeout of 1sec
	    if(GetTickCount() - time > 1000)
        {
            errorf("Error: Can't stop the target\n");
            return -1;
        }
	} while(targetApi.getState() != TARGET_HALTED )	
	
	
	flash_unlock();
    
	return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence according ST user manual
//
function flash_erase(sector, address)
{
    local result;
	
    // 1. Check that no Flash memory operation is ongoing by checking the BSY1 in the SR
	// (we already check that on the end of every flash action)
	
	// 2. Check and clear all error programming flags due to a previous programming. If not, PGSERR is set.
	result = itrfApi.readMem32(0x40022010); if(result<0) return result;
	result = itrfApi.writeMem32(0x40022010, itrfApi.value32 | 0xc3fb ); if(result<0) return result;
	
    // 3. Set the PER bit and select the page to erase (PNB) in the flash_cr
	result = itrfApi.readMem32 (0x40022014); if(result<0) return result;
	result = itrfApi.writeMem32(0x40022014, itrfApi.value32 & ~(0x7F << 3) | (sector <<3) | 2 ); if(result<0) return result;
	
	// 4. Set the STRT bit of the flash_cr
	result = itrfApi.readMem32 (0x40022014); if(result<0) return result;
	result = itrfApi.writeMem32(0x40022014, itrfApi.value32 | 0x10000 ); if(result<0) return result;

	// 5. Wait until the BSY1 bit of the flash_SR
	return flash_check_busy();
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The length is always equals to the page to be programmed in bytes.
//  We don't use a flash loader here. We just write the pages word by word.
//  Because every word needs to be transported by USB, we don't check the busy
//  flag in between because we are not that fast.
//
function flash_write(sector, address, buffer)
{
    local result;

	
	// Check if the buffer.byteLength is multiple of 64bits
	// Flash loader works with multiple of 8 bytes.
	if(buffer.byteLength & 7)
        buffer.byteLength = buffer.byteLength + (8 - (buffer.byteLength & 7));	

		
	// 2. Check and clear all error programming flags due to a previous programming. If not, PGSERR is set.

	
	// 3. Set the PG bit of the FLASH control register (FLASH_CR)
	result = itrfApi.writeMem32(0x40022014,  1 ); if(result<0) return result;	

	
    for(local count = 0; count < buffer.byteLength; count += 4)
    {
        itrfApi.writeMem32(address, buffer.un32(count) );
        address += 4;
		count   += 4
        itrfApi.writeMem32(address, buffer.un32(count) );
		address += 4;	
		
		// 5. Wait until the BSY1 bit of the flash_SR
		result = flash_check_busy();
		if(result<0) return result;
    }

	
	// 7. Clear the PG bit of the FLASH control register (FLASH_CR) if there no more
    // programming request anymore
	result = itrfApi.readMem32 (0x40022014); if(result<0) return result;
	result = itrfApi.writeMem32(0x40022014, itrfApi.value32 & ~1 ); if(result<0) return result;
	
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
	flash_lock();
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_unlock()
{
    local result;


    // Unlock Flash
    result = itrfApi.writeMem32(0x40022008, 0x45670123 ); if(result<0) return result;
    result = itrfApi.writeMem32(0x40022008, 0xcdef89ab ); if(result<0) return result;
		
	result = itrfApi.readMem32(0x40022014); if(result<0) return result;
	if(itrfApi.value32 & 0x80000000 )
	{
	    errorf("Error: unlock flash failed!\n");
		return -1;
	}
	
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flash_lock()
{
    local result;

	// Write the CR register to lock (LOCK)
    result = itrfApi.writeMem32(0x40022014, 0x80000000);
	
	return result;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flash_check_busy()
{
	local result;
	local time;
	
	time = GetTickCount();
	do
	{
		result = itrfApi.readMem32(0x40022010); if(result<0) return result;

	    // Timeout of 1sec
	    if(GetTickCount() - time > 1000)
        {
            errorf("Error: flash keeps busy\n");
            return -1;
        }
		
	} while ( itrfApi.value32 & 0x10000);	

	if( itrfApi.value32 & 0x8)
	{
	   errorf("Error: flash programming failed!\n");
	   return -1;
	}
		
	if( itrfApi.value32 & 0x10)
	{
	   errorf("Error: flash write protect!\n");
	   return -1;
	}
	
	// Clear error's
	itrfApi.writeMem32(0x40022010, 0x18);
	
	return 0;
}



