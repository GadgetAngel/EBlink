/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32F7F4_flash (stm32F7xx and stm32F4xxx )
//
//
// This script doesn't use an external flash loader but is writing directly
// to the target. Speed doesn't differ much but it is easier.
//
// This script is not yet capable of flashing <2.7V. Perhaps we need an external
// loader for that. Example of script with external loader see stm32HW_fl.script.
//
// Feel free to modify but don't forget to share!
//

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and preload the flash loader
//
function flash_start()
{
    local targetApi = :: TargetAPI(); // Our interface to the target class
    local result;

    // Be sure that the core is halted
    result = targetApi.halt(); if(result<0) return result;

    // Wait for flash not busy
    do{
         result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x01 );

    // Read flash lock status in FLASH_CR
    result = itrfApi.readMem32(0x40023c10); if(result<0) return result;

    // Check if it's locked by the FLASH_CR_LOCK flag
    if( itrfApi.value32 & 0x80000000 )
    {
        // Write flash KEYR
        result = itrfApi.writeMem32(0x40023c04,0x45670123); if(result<0) return result;
        result = itrfApi.writeMem32(0x40023c04,0xcdef89ab); if(result<0) return result;


        // Read flash CR again to check FLASH_CR_LOCK if it's unlocked
        result = itrfApi.readMem32(0x40023c10); if(result<0) return result;
        if( itrfApi.value32 & 0x80000000 )
        {
            errorf("Error: can't unlock flash!\n");
            return -1;
        }
    }

    if(itrfApi.targetVoltage() < 2.7)
    {
        errorf("Error: Current STM32F4x flash algorithm needs at least 2.7V\nTarget voltage is %.2f V\n", itrfApi.targetVoltage());
        return -1;
    }

  // For 32bits parallelism the voltage must be higher than 2.7V
    result = itrfApi.writeMem32(0x40023c10, (2<<8) ); if(result<0) return result;

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Sector erase sequence according ST user manual (Unlocking is already done by flash_start )
//
function flash_erase(sector, address)
{
    local result;

    // (1) Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_SR register
    do{
       result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x10000 );

    // (2) Set the SER bit and select the sector out of the 8 in the main memory block) you wish to erase (SNB) in the FLASH_CR register
    result = itrfApi.writeMem32(0x40023c10, (sector<<3) | 2 ); if(result<0) return result;

    // (3) Set the STRT bit in the FLASH_CR register also
    result = itrfApi.writeMem32(0x40023c10, (sector<<3) | 0x10002); if(result<0) return result;

    // (4) Wait for the BSY bit to be cleared
    do{
         result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x10000 );

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The length is always equals to the page to be programmed in bytes.
//  Only whole pages are programmed driven by the cache engine of this GDB server.
//
function flash_write(sector, address, buffer)
{

    local targetApi = :: TargetAPI(); // Our interface to the target class
    local result;


    // Enable the program flag PG in flash_CR together with the 32bits parallelism
    result = itrfApi.writeMem32(0x40023c10, (2<<8) | 0x01 ); if(result<0) return result;

    // Write buffer to flash space directly
    result = itrfApi.writeBuf(address, buffer); if(result<0) return result;

    // Wait for ready
    do{
         result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x10000 );

    // Disable the program flag  PG in flash_CR
    itrfApi.writeMem32(0x40023c10, 0); if(result<0) return result;


    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
    local result

    // Relock the flash by setting the FLASH_CR_LOCK in the flash CR register
    result = itrfApi.writeMem32(0x40023c10,  0x80000000);
    if(result<0)
        return result;

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used.
//   - This is an isolated function, flash_start and flash_done are not called by EB-link
//
function flash_erase_chip()
{
    local result;

    // Enable the flash engine
    flash_start();

    // Chip erase sequence according ST user manual
    //
    // (1) Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_SR register
    do{
       result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x10000 );

    // (2)Set the MER bit in the FLASH_CR register
    result = itrfApi.writeMem32(0x40023c10,  4 ); if(result<0) return result;

    // (3) Set the STRT bit in the FLASH_CR register also
    result = itrfApi.writeMem32(0x40023c10,  0x10004); if(result<0) return result;

    // (4) Wait for the BSY bit to be cleared
    do{
         result = itrfApi.readMem32(0x40023c0C); if(result<0) return result;
    }while ( itrfApi.value32 &  0x10000 );

	// Check for error
	result = itrfApi.readMem32(0x40023c0C);

    // Disable the flash engine
    flash_done();

	// Evaluate the result
	if ((itrfApi.value32 & 0xF2) || !(itrfApi.value32 & 0x01)){
	    printf("Flash: chip erase failed!\n");
		return -1;
	}

    printf("Flash: chip erased.\n");
    return 0;
}








