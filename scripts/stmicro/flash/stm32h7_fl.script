/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32F7H7_flash
//
// This script is not yet capable of flashing <2.7V. Perhaps we need an external
// loader for that. Example of script with external loader see stm32HW_fl.script.
//
// Feel free to modify but don't forget to share!
//

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and preload the flash loader called by EBlink
//
function flash_start()
{
    local targetApi = ::TargetAPI(); // Our interface to the target class
    local result;
    local time;

    // Be sure that the core is halted
    result = targetApi.halt(); if(result<0) return result;

	targetApi.reset(0);

    // Wait for halt
    time = GetTickCount();
	do{
	    targetApi.poll();
	    // Timeout of 1sec
	    if(GetTickCount() - time > 1000)
        {
            errorf("Error: Can't stop the target\n");
            return -1;
        }
	} while(targetApi.getState() != TARGET_HALTED )

    if(itrfApi.targetVoltage() < 2.7)
    {
        errorf("Error: Current STM32H7x flash algorithm needs at least 2.7V\nTarget voltage is %.2f V\n", itrfApi.targetVoltage());
        return -1;
    }

	// No errors
    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   The sector erase is called by EBlink if a sector need to be changed
//   Sector erase sequence according ST user manual
//
function flash_erase(sector, address)
{
    local result;
    local regbase = 0x52002000; // first flash bank
    local time;
	
	// Skip the virtual option sector
	if(sector == 999)
	  return 0;

    // Select the right bank
	if (address >= 0x08100000) {
		regbase = 0x52002100; // Second flash bank
		sector = sector-8;
	}

	// 1)  Check and clear (optional) all the error flags due to previous programming/erase
    if(flash_get_clear_status(regbase) )
    {
        errorf("Error: Flash erase begin error 0x%x\n", itrfApi.value32 & 0x07EE0000);
        return -1;
    }

	// 2) Unlock the flash bank
    result = flash_unlock(regbase);
    if( result < 0)
        return result;

    // Not sure: We come out of reset with HSI 64 MHz. Adapt FLASH_ACR.
    //result = itrfApi.writeMem32(regbase, 0); if(result<0) return result;

    // (3) Set the SER bit and select the sector out of the 8 in the main memory block) you wish to erase (SNB) in the FLASH_CR register
    result = itrfApi.writeMem32(regbase + 0x0C, (sector<<8) | 0x4 | 0x2 ); if(result<0) return result;

    // (4) Set the STRT bit in the FLASH_CR register also
    result = itrfApi.writeMem32(regbase + 0x0C, (sector<<8) | 0x84 | 0x2 ); if(result<0) return result;

    // (5) Wait for the QW1/2 bit and BSY1/2 to be cleared in the corresponding FLASH_SR1/2 register
    time = GetTickCount();
    do{
        result = itrfApi.readMem32(regbase + 0x10); if(result<0) return result;

	    // Timeout of 5sec
	    if(GetTickCount() - time > 5000)
        {
            errorf("Error: Sector erase timeout\n");
            return -1;
        }
    }while ( itrfApi.value32 &  0x05 );


    // Check for errors
    if(itrfApi.value32 & 0x07EE0000 )
    {
        errorf("Error: Flash erase end error 0x%x\n", itrfApi.value32 & 0x07EE0000);
        return -1;
    }

	// Lock the flash again
	flash_lock(regbase);

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink to flash a sector
//
function flash_write(sector, address, buffer)
{
    local regbase = 0x52002000; // first flash bank
    local result;
    local time;

	
	// If this is the virtual option sector, go to write options
	if(sector == 999)
	  return option_write(buffer);
	
    // Select the right bank
	if (address >= 0x08100000) {
		regbase = 0x52002100; // Second flash bank
	}


	// Flash loader works with multiple of 32 bytes.
	if(buffer.byteLength & 31)
        buffer.byteLength = buffer.byteLength + (32 - (buffer.byteLength & 31));

    // Unlock flash
	flash_unlock(regbase);

    // Enable  the 32bits parallelism
    result = itrfApi.writeMem32(regbase+0x0C, (2<<4) ); if(result<0) return result;

	// Enable the program flag PG in flash_CR
	result = itrfApi.writeMem32(regbase+0x0C, (2<<4) | (1<<1) ); if(result<0) return result;

	// STlink/V2 and V2.1 are rather slow, we can write direct
	if( itrfApi.getName() != "STlink/V3" )
	{
	  itrfApi.writeBuf(address, buffer);
	}
	else
	{   // STlink/V3 is too fast for direct so we will program per 256 bits
		for(local count = 0; count < buffer.byteLength; )
		{		
			// 256 bits per time
			itrfApi.writeMem(address, buffer, count, 32 );
			address += 32;
			count   += 32;
			
			// This is only needed for high speed (ICP) but in case the V3 will be faster 
			// in the future, we already catch it here.
			if( itrfApi.getSpeed() > 25000  )
			{
				//result = flash_check_busy(); if(result<0) return result;
			}
		}
    }

    // Check and clear (optional) all the error flags due to previous programming/erase
    result = itrfApi.readMem32(regbase + 0x10); if(result<0) return result;
    if(itrfApi.value32 & 0x07EE0000 )
    {
        errorf("Error: Flash write error 0x%x", itrfApi.value32 & 0x07EE0000);
        return -1;
    }

    // Disable the program flag  PG in flash_CR
    itrfApi.writeMem32(regbase+ 0x0C, 0); if(result<0) return result;

	// Lock the flash again
	flash_lock(regbase);

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Write STM32H7 option bytes 
//
//  Virtual sector 999 of 32 bytes with format as below. 
//  Be aware of reserved reset values!! (otherwise program errors)
//
//  typedef struct {       //   Reset    Flash control offset
//     un32 FLASH_OPTSR;   //0x1416AAF0  0x20 (alias 0x120)
//     un32 FLASH_BOOT;    //0x1FF00800  0x44 (alias 0x144)
//     un32 FLASH_PRAR_x1; //0x000000FF  0x2C
//     un32 FLASH_PRAR_x2; //0x000000FF  0x12C
//     un32 FLASH_SCAR_x1; //0x800000FF  0x34
//     un32 FLASH_SCAR_x2; //0x800000FF  0x134
//     un32 FLASH_WPSN_x1; //0x000000FF  0x3C
//     un32 FLASH_WPSN_x2; //0x000000FF  0x13C
//  } STM32H7_options;
//
//
function option_write(buffer)
{
    local regbase = 0x52002000; // first flash bank
    local result;	
    local time;
   
    // Check if the buffer is valid
	if(buffer.byteLength != 32)
	{
	   errorf("Error: Option program length is %d, should be 32 bytes\n", buffer.byteLength);
	   return -1;
	}
      
    printf("\n\nStart writing option bytes virtual sector 999\n");
	
	
    //------------- Unlock options	--------------
    // Read flash FLASH_OPTCR
    result = itrfApi.readMem32(regbase + 0x18); if(result<0) return result;

    // Check if options are locked by the FLASH_OPTCR_OPTLOCK flag
    if( itrfApi.value32 & 0x01 )
    {        
		// Write FLASH_OPTKEYR to unlock
        result = itrfApi.writeMem32(regbase + 0x08, 0x08192a3b); if(result<0) return result;
        result = itrfApi.writeMem32(regbase + 0x08, 0x4c5d6e7f); if(result<0) return result;


        // Reread flash FLASH_OPTCR to check if we are unlocked
        result = itrfApi.readMem32(regbase + 0x18); if(result<0) return result;
        if( itrfApi.value32 & 0x01 )
        {
            errorf("Error: can't unlock stm32h7 options!\n");
            return -1;
        }
    }	
	
	//-------------- Program the options ---------

	printf("FLASH_OPTSR  : 0x%x\n", buffer.un32(0));
	result = itrfApi.writeMem32(regbase + 0x20, buffer.un32(0) ); if(result<0) return result;
	
	printf("FLASH_BOOT   : 0x%x\n", buffer.un32(4));
	result = itrfApi.writeMem32(regbase + 0x44, buffer.un32(4) ); if(result<0) return result;

	printf("FLASH_PRAR_x1: 0x%x\n", buffer.un32(8));
	result = itrfApi.writeMem32(regbase + 0x2C, buffer.un32(8) ); if(result<0) return result;

	printf("FLASH_PRAR_x2: 0x%x\n", buffer.un32(12));
	result = itrfApi.writeMem32(regbase + 0x12C, buffer.un32(12) ); if(result<0) return result;

	printf("FLASH_SCAR_x1: 0x%x\n", buffer.un32(16));
	result = itrfApi.writeMem32(regbase + 0x34, buffer.un32(16) ); if(result<0) return result;

	printf("FLASH_SCAR_x2: 0x%x\n", buffer.un32(20));
	result = itrfApi.writeMem32(regbase + 0x134, buffer.un32(20) ); if(result<0) return result;


	printf("FLASH_WPSN_x1: 0x%x\n", buffer.un32(24));
	result = itrfApi.writeMem32(regbase + 0x3C, buffer.un32(24) ); if(result<0) return result;

	printf("FLASH_WPSN_x2: 0x%x\n", buffer.un32(28));
	result = itrfApi.writeMem32(regbase + 0x13C, buffer.un32(28) ); if(result<0) return result;		
	
    //------------- Commit options	--------------	
			
		
	// Remove OPT error flag in FLASH_OPTCCR before programming 
    result = itrfApi.writeMem32(regbase + 0x24, 0x40000000); if(result<0) return result;	
	
	// Set the FLASH_OPTCR_OPTSTART in the FLASH_OPTCR
	result = itrfApi.writeMem32(regbase + 0x18, 2); if(result<0) return result;
						
    time = GetTickCount();
    do{
	    // Read the FLASH_OPTSR_CUR to get the busy flag
        result = itrfApi.readMem32(regbase + 0x1C); if(result<0) return result;
		
		CursorAnimate();
		
	    // Timeout of 1sec
	    if(GetTickCount() - time > 1000)
        {
            errorf("Error: Option program timeout\n");
            return -1;
        }
    // Check for the busy flag 		
    }while ( itrfApi.value32 &  0x01 );		
				
    result = itrfApi.readMem32(regbase + 0x1c); if(result<0) return result;	
	
	if(itrfApi.value32 & 0x40000000)
	  errorf("Error: Option bytes writing failed!\n");
	else	
	  printf("Options bytes ready\n\n");	
		
	// Relock the options bytes	
	result = itrfApi.writeMem32(regbase + 0x18, 1); if(result<0) return result;	
		
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if flashing is done
//
function flash_done()
{
    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink is chip erease is needed (e.g. command line flashing)
//  This function is optional, if EBlink can't find it, it will erase per sector
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used.
//   - This is an isolated function, flash_start and flash_done are not called by EB-link
//   - The boolean "hasSecondBank" is set by parent script
//
// ToDo: Check if we have a second flash bank
function flash_erase_chip()
{
    local result;
    local time = GetTickCount();

	printf("Flash: chip erasing ");

	// 1. Check and clear (optional) all the error flags due to previous programming/erase
    if(flash_get_clear_status(0x52002000) )
    {
        errorf("Error: Flash error bank1 0x%x", itrfApi.value32 & 0x07EE0000);
        return -1;
    }

	// 2. Unlock the two FLASH_CR1/2 registers and FLASH_OPTCR register
	flash_unlock(0x52002000);

	// The same, two steps, for the second bank if exists
	if(hasSecondBank)
	{
		if(flash_get_clear_status(0x52002100) )
		if(itrfApi.value32 & 0x07EE0000 )
		{
			errorf("Error: Flash error bank2 0x%x", itrfApi.value32 & 0x07EE0000);
			return -1;
		}

		flash_unlock(0x52002100);
	}


	//  3. Set the MER bit to 1 in FLASH_OPTCR register. It automatically sets BER1, BER2,
    //     START1 and START2 to 1, thus launching a bank erase operation on both banks.
	result = itrfApi.writeMem32(0x52002000 + 0x18, 0x10 ); if(result<0) return result;


	// Then wait until both QW1 and QW2 bits are cleared in the corresponding FLASH_SR1/2
    // register.

	// ... bank 1
    do{
        result = itrfApi.readMem32(0x52002000 + 0x10); if(result<0) return result;
        CursorAnimate();

	    // Timeout of 10sec (it can take quite long
	    if(GetTickCount() - time > 10000)
        {
            errorf("Error: Mass erase timeout\n");
            return -1;
        }
    }while ( itrfApi.value32 &  0x05 );

	// .... and bank 2
	if(hasSecondBank)
		do{
			result = itrfApi.readMem32(0x52002100 + 0x10); if(result<0) return result;
			CursorAnimate();

            // Timeout of 10sec (it can take quite long
            if(GetTickCount() - time > 10000)
            {
                errorf("Error: Mass erase timeout\n");
                return -1;
            }
		}while ( itrfApi.value32 &  0x05 )

	// Lock the flash banks again
	flash_lock(0x52002000);

	if(hasSecondBank)
		flash_lock(0x52002100);

    printf("done [%ums] \n", GetTickCount() - time);
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Get (and clear) the flash status
//
function flash_get_clear_status(regbase)
{
	local result;

	result = itrfApi.readMem32(regbase + 0x10); if(result<0) return result;
    if( !result && (itrfApi.value32 & 0x07EE0000 ))
	   return -1;
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_unlock(regbase)
{
    local result;
    local time = GetTickCount();

    // Wait for flash not busy
    do{
         result = itrfApi.readMem32(regbase + 0x10); if(result<0) return result;

	    // Timeout of 1sec
	    if(GetTickCount() - time > 1000)
        {
            errorf("Error: Flash unlock timeout\n");
            return -1;
        }
    }while ( itrfApi.value32 &  0x01 );

    // Read flash lock status in FLASH_CR
    result = itrfApi.readMem32(regbase + 0x0C); if(result<0) return result;

    // Check if it's locked by the FLASH_CR_LOCK flag
    if( itrfApi.value32 & 0x01 )
    {
        // Write flash KEYR
        result = itrfApi.writeMem32(regbase + 0x04, 0x45670123); if(result<0) return result;
        result = itrfApi.writeMem32(regbase + 0x04, 0xcdef89ab); if(result<0) return result;


        // Read flash CR again to check FLASH_CR_LOCK if it's unlocked
        result = itrfApi.readMem32(regbase + 0x0C); if(result<0) return result;
        if( itrfApi.value32 & 0x01 )
        {
            errorf("Error: can't unlock flash!\n");
            return -1;
        }
    }

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flash_lock(regbase)
{
    local result;

    result = itrfApi.writeMem32(regbase + 0x0C, 0x01);
    if(result<0)
        return result;
    return 0;
}



