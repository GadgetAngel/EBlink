/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32HW_fl (Half word flash loader)
//

dataStart <- 0;  // Global variable, pointer to the buffer in RAM

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and preload the flash loader
//
function flash_start()
{
    local targetApi = :: TargetAPI(); // Our interface to the target class
    local result;

    // Be sure that the core is halted
    result = targetApi.halt(); if(result<0) return result;

    // Read flash lock status
    result = itrfApi.readMem32(0x40022010); if(result<0) return result;

    // Check if it's locked by the FLASH_CR_LOCK flag
    if( itrfApi.value32 & 0x80 )
    {
        // Write flash KEYR
        result = itrfApi.writeMem32(0x40022004,0x45670123); if(result<0) return result;
        result = itrfApi.writeMem32(0x40022004,0xcdef89ab); if(result<0) return result;


        // Read flash CR again to check FLASH_CR_LOCK if it's unlocked
        result = itrfApi.readMem32(0x40022010); if(result<0) return result;
        if( itrfApi.value32 & 0x80 )
        {
            errorf("Error: can't unlock flash!\n");
            return -1;
        }
    }

    // Pre load the Halfword flash loader at the start of RAM and save the loader size.
    // The return value is length of bytes loaded ( >0) or error (<0)
    dataStart = itrfApi.loadBin("stmicro/flash/stm32HW_fl.bin", 0x20000000);

    // If dataStart is <0 = Error
    if(dataStart < 0 )
    {
       // Check if we already notified the user (< -1) otherwise, do so.
       if(dataStart < -1)
           errorf("Script error loading flash loader: " + "scripts/stmicro/flash/stm32HW_fl.bin" );
       return -1;
    }

    // We place the RAM buffer right after the loader which is at the very beginning.
    dataStart += 0x20000000;

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence according ST user manual
//    - flash_start() is already called
//    - flash_done() will be called if all flash operations are ready
//
function flash_erase(sector, address)
{
    local result;

    // (1) Set the PER bit in the FLASH_CR register to enable page erasing
    result = itrfApi.writeMem32(0x40022010, 0x02 ); if(result<0) return result;

    // (2) Program the FLASH_AR register to select a page to erase
    result = itrfApi.writeMem32(0x40022014, address ); if(result<0) return result;

    // (3) Set the STRT bit (keep PER set) in the FLASH_CR register to start the erasing
    result = itrfApi.writeMem32(0x40022010,  0x42); if(result<0) return result;

    // (4) Wait until the BSY bit is reset in the FLASH_SR register
    do{
         result = itrfApi.readMem32(0x4002200C); if(result<0) return result;
    }while ( itrfApi.value32 & 0x01);

    //  (5) Check the EOP flag in the FLASH_SR register
    if( itrfApi.value32 & 0x10)
    {
       errorf("ERROR: Failed erasing sector %d\n", sector);
       return -1;
    }

    // (6) Clear EOP flag by software by writing EOP at 1
    result = itrfApi.writeMem32(0x4002200C, itrfApi.value32 | 0x10); if(result<0) return result;

    // (7) Reset the PER Bit to disable the page erase
    result = itrfApi.writeMem32(0x40022010, 0 ); if(result<0) return result;

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The length is always equals to the page to be programmed in bytes.
//  Only whole pages are programmed driven by the cache engine of this GDB server.
//
function flash_write(sector, address, buffer)
{
    local targetApi = :: TargetAPI(); // Our interface to the target class
    local result;

    // Enable the program flag PG in flash_CR
    result = itrfApi.writeMem32(0x40022010, 0x01 ); if(result<0) return result;

    // Write buffer to data ram space
    result = itrfApi.writeBuf(dataStart, buffer); if(result<0) return result;

    buffer.byteLength /= 2; // Half words (16bits) count used by the flash loader

    // Initialize flash loader
    result = targetApi.writeReg("R0", dataStart);   // Data address to be written
    result = targetApi.writeReg("R1", address);     // Target address in flash
    result = targetApi.writeReg("R2", buffer.byteLength);   // Halfwords count to be written

    // Run flash loader
    result = targetApi.execute(0x20000000, true); if(result<0) return result;

    // Disable the program flag  PG in flash_CR
    itrfApi.writeMem32(0x40022010, 0); if(result<0) return result;

    // Check flash loader result, if $R2 is 0 then all data is written
    result = targetApi.readReg("R2");
    if(targetApi.value32 != 0)
    {
       errorf("ERROR flashing sector: %d [0x%08X]", sector, address);
       return -1;
    }

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
    local result

    // Relock the flash by setting the FLASH_CR_LOCK in the flash CR register
    result = itrfApi.writeMem32(0x40022010, 0x80);
    if(result<0)
        return result;

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase the whole chip
//   - If this function is not declared, sector by sector erase is used.
//
//function flash_erase_chip()
//{
//    return 0;
//}



