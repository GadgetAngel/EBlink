/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32L0_fl flash loader
//
//  Gerard Zagema

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_start()
{
    local targetApi = :: TargetAPI(); // Our interface to the target class
    local result;

    // Be sure that the core is halted
    result = targetApi.halt();
    if(result<0) return result;

    // Read the PECR register to check if the flash is locked (PRGLOCK)
    result = itrfApi.readMem32(0x40022004);
    if(itrfApi.value32 & 0x02 )
    {
        // Check if the PECR is locked
        if(itrfApi.value32 & 0x01 )
        {
            // Unlock PECR
            result = itrfApi.writeMem32(0x4002200C, 0x89ABCDEF );
            result = itrfApi.writeMem32(0x4002200C, 0x02030405 );
        }

        // Unlock PRGM
        result = itrfApi.writeMem32(0x40022010, 0x8C9DAEBF );
        result = itrfApi.writeMem32(0x40022010, 0x13141516 );

        // Unlock options region
        result = itrfApi.writeMem32(0x40022014, 0xFBEAD9C8 );
        result = itrfApi.writeMem32(0x40022014, 0x24252627 );
    }

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence according ST user manual
//
function flash_erase(sector, address)
{
    local result;

    // Check if we are in the option area
    if(address >= 0x1FF80000 )
    {
        // The options are erased when it is written
        return 0;
    }

    // (1) Set the ERASE and PROG bits in the FLASH_PECR register to enable page erasing
    result = itrfApi.writeMem32(0x40022004, 0x0208 );
    if(result<0) return result;

    // (2) Write a 32-bit word value in an address of the selected page to start the erase sequence
    result = itrfApi.writeMem32(address, 0 );
    if(result<0) return result;

    //  (3) Wait until the BSY bit is reset in the FLASH_SR register
    do
    {
        result = itrfApi.readMem32(0x40022018);
        if(result<0) return result;
    }
    while ( itrfApi.value32 & 0x01);

    //  (4) Check the EOP flag in the FLASH_SR register
    if( itrfApi.value32 & 0x10)
    {
        errorf("ERROR: Failed erasing sector %d\n", sector);
        return -1;
    }

    // (5) Clear EOP flag by software by writing EOP at 1
    result = itrfApi.writeMem32(0x40022018, itrfApi.value32 | 0x10);
    if(result<0) return result;

    //  (6) Reset the ERASE bits in the FLASH_PECR register to disable the page erase
    result = itrfApi.writeMem32(0x40022004, 0x0008 );
    if(result<0) return result;

    return 0;
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The length is always equals to the page to be programmed in bytes.
//  We don't use a flash loader here. We just write the pages word by word.
//  Because every word needs to be transported by USB, we don't check the busy
//  flag in between because we are not that fast.
//
function flash_write(sector, address, buffer)
{
    local result;

    // Check if we are in the option area
    if(address >= 0x1FF80000 )
    {
        return flash_write_options(address, buffer);
    }

    // (1) Enable the program  FPRG and PRG in FLASH_PECR
    result = itrfApi.writeMem32( 0x40022004, 0x0408 );
    if(result<0) return result;

    // (2) Write buffer to flash space word by word. A block write goes too fast.
    for(local count = 0; count < buffer.byteLength; count += 4)
    {
        itrfApi.writeMem32(address, buffer.un32(count) );
        address += 4;
    }

    //  (3) Wait until the BSY bit is reset in the FLASH_SR register
    do
    {
        result = itrfApi.readMem32(0x40022018);
        if(result<0) return result;
    }
    while ( itrfApi.value32 & 0x01 );

    //  (4) Check the EOP flag in the FLASH_SR register
    if( itrfApi.value32 & 0x10)
    {
        errorf("ERROR: Failed erasing sector %d\n", sector);
        return -1;
    }

    // (5) Clear EOP flag by software by writing EOP at 1
    result = itrfApi.writeMem32(0x40022018, itrfApi.value32 | 0x10);
    if(result<0) return result;

    // (6) Disable the program flag FPRG in FLASH_PECR
    itrfApi.writeMem32(0x40022004, 0x0008);
    if(result<0) return result;

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
    local targetApi = :: TargetAPI();
    local result

    result = itrfApi.readMem32(0x40022004);

    //  Lock the option region and PGM
    itrfApi.value32 = itrfApi.value32 | 6;
    result = itrfApi.writeMem32(0x40022004, itrfApi.value32 );

    //  Lock the PECR
    itrfApi.value32 = itrfApi.value32 | 1;
    result = itrfApi.writeMem32(0x40022004, itrfApi.value32 );

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_write_options(address, buffer)
{
    local result

    for(local count = 0; count < buffer.byteLength; count += 4)
    {
        //------------ First we have to erase the option
        result = itrfApi.writeMem32(0x40022004, 0x0200 );

        result = itrfApi.writeMem32(address, 0);

        //  Wait until the BSY bit is reset in the FLASH_SR register
        do
        {
            result = itrfApi.readMem32(0x40022018);
            if(result<0) return result;
        }
        while ( itrfApi.value32 & 0x01 );

        //  Check the EOP flag in the FLASH_SR register
        if( itrfApi.value32 & 0x10)
        {
            // Clear EOP flag by software by writing EOP at 1
            result = itrfApi.writeMem32(0x40022018, itrfApi.value32 | 0x10);
        }

        // Clear erase bit
        result = itrfApi.writeMem32(0x40022004, 0x0000 );

        //------------ Write the option byte

        itrfApi.writeMem32(address, buffer.un32(count));
       // printf(" write option addres 0x%x - 0x%x\n", address, buffer.un32(count) & 0xFFFF );

        do
        {
            result = itrfApi.readMem32(0x40022018);
            if(result<0) return result;
        }
        while ( itrfApi.value32 & 0x01 );

        //  Check the EOP flag in the FLASH_SR register
        if( itrfApi.value32 & 0x10)
        {
            // Clear EOP flag by software by writing EOP at 1
            result = itrfApi.writeMem32(0x40022018, itrfApi.value32 | 0x10);
        }

        address += 4;
    }

    // Warn user to power cycle the target after upload
    warnf("Option bytes are changed!\nPlease power cycle the target!\n");
    return 0;
}




