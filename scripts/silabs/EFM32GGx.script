/////////////////////////////////////////////////////
//
//     The EFM32GGx flashing scripts according
//     Silabs reference manual
//

/*
    The offset register address is relative to the registers base address (0x400C0000).

Offset Name Type Description
0x000 MSC_CTRL RW Memory System Control Register
0x004 MSC_READCTRL RW Read Control Register
0x008 MSC_WRITECTRL RW Write Control Register
0x00C MSC_WRITECMD W1 Write Command Register
0x010 MSC_ADDRB RW Page Erase/Write Address Buffer
0x018 MSC_WDATA RW Write Data Register
0x01C MSC_STATUS R Status Register
0x02C MSC_IF R Interrupt Flag Register
0x030 MSC_IFS W1 Interrupt Flag Set Register
0x034 MSC_IFC W1 Interrupt Flag Clear Register
0x038 MSC_IEN RW Interrupt Enable Register
0x03C MSC_LOCK RW Configuration Lock Register
0x040 MSC_CMD W1 Command Register
0x044 MSC_CACHEHITS R Cache Hits Performance Counter
0x048 MSC_CACHEMISSES R Cache Misses Performance Counter
0x050 MSC_TIMEBASE RW Flash Write and Erase Timebase
0x054 MSC_MASSLOCK RW Mass Erase Lock Register
*/


/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and prepare erasing and writing
//
function flash_start()
{
    local result

printf("start flash\n")

     // Be sure that the core is halted
    result = targetApi.halt()
    if(result<0) return result

    // Unlock MSC
    result = intrfApi.writeMem32(0x400C003C, 0x1B71)
    if(result<0) return result

    // Enable WREN in  MSC_WRITECTRL
    intrfApi.readMem32(0x400E0008)
    result = intrfApi.writeMem32(0x400C0008, intrfApi.value32 | 0x01 )

    return result
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence of one sector
//
function flash_erase(sector, address)
{
    local result

    //MSC->ADDRB = address
    result = intrfApi.writeMem32(0x400C0010, address)
    if(result<0) return result

    // MSC->WRITECMD = MSC_WRITECMD_LADDRIM
    result = intrfApi.writeMem32(0x400C000C, 0x01)
    if(result<0) return result

    //MSC->WRITECMD = MSC_WRITECMD_ERASEPAGE
    result = intrfApi.writeMem32(0x400C000C, 0x02)
    if(result<0) return result

    //while ( MSC->STATUS & MSC_STATUS_BUSY )
    do{
         result = intrfApi.readMem32(0x400C001C)
    }while ( (result >= 0) && (intrfApi.value32 &  0x01 ) )

    return result
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The actual flash writing. The length is always 32 bits boundary but can be
//  smaller than a sector size.
//
function flash_write(sector, address, buffer)
{
    local result
    local idx = 0

    //while ( MSC->STATUS & MSC_STATUS_BUSY )
    do{
         result = intrfApi.readMem32(0x400C001C)
    }while ( (result >= 0) && (intrfApi.value32 &  0x01 ) )

    // Write the destination address in MSC_ADDRB
    result = intrfApi.writeMem32(0x400C0010, address)
    if(result<0) return result

    // MSC->WRITECMD = MSC_WRITECMD_LADDRIM
    result = intrfApi.writeMem32(0x400C000C, 0x01)
    if(result<0) return result

    // Write the flash content and use the auto address increment
    // of the MSC engine.
    while( idx < buffer.getSize() )
    {
        // Write word to MSC_DATA
        result = intrfApi.writeMem32( 0x400C0018, buffer.un32(idx) )
        if(result<0) return result

        // Initiate write with auto increment, 1 to WRITETRIG in MSC_WRITECMD
        result = intrfApi.writeMem32(0x400C000C, 0x10)
        if(result<0) return result
        idx += 4
    }


    // End writing  MSC->WRITECMD = MSC_WRITECMD_WRITEEND
    result = intrfApi.writeMem32(0x400E000C, 0x04)

    return result
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Finalize the flash operations
//
function flash_done()
{
    local result = 0

    //while ( MSC->STATUS & MSC_STATUS_BUSY )
    do{
         result = intrfApi.readMem32(0x400C001C)
    }while ( (result >= 0) && (intrfApi.value32 &  0x01 ) )

    // Disable flash writing WREN in MSC_WRITECTRL
    //intrfApi.readMem32(0x400E0008)
    result = intrfApi.writeMem32(0x400C0008, 0 ) //intrfApi.value32 & 0xFFFFFFFE )
    if(result<0) return result

    // Lock MSC
    result = intrfApi.writeMem32(0x400C003C, 0x0 )

    return result
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EB-link.
//   - This is an isolated function, flash_start and flash_done are not
//     called by EB-link so we have to explicit unlock and lock in this function.
//
function flash_erase_chip()
{
    local result

    // Unlock device, see above
    result = flash_start()
    if(result<0) return result

    // MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK
    result = intrfApi.writeMem32(0x400C0054, 0x631A)
    if(result<0) return result

    // Erase first 512K block
    //MSC->WRITECMD = MSC_WRITECMD_ERASEMAIN0
    result = intrfApi.writeMem32(0x400C000C, 0x100)
    if(result<0) return result

    //while ( MSC->STATUS & MSC_STATUS_BUSY )
    do{
         result = intrfApi.readMem32(0x400C001C)
         if(result<0) return result
    }while ( intrfApi.value32 &  0x01 )

    // Second 512K block if this is available
    if( flashSize > 512 )
    {
       //MSC->WRITECMD = MSC_WRITECMD_ERASEMAIN1
       result = intrfApi.writeMem32(0x400C000C, 0x200)
       if(result<0) return result

       //while ( MSC->STATUS & MSC_STATUS_BUSY )
       do{
            result = intrfApi.readMem32(0x400C001C)
            if(result<0) return result
        }while ( intrfApi.value32 &  0x01 )
    }

    // Lock the flash, see above
    result = flash_done()

    // Inform the user what we did
    printf("Flash: -- chip erased --\n")
    return result
}
